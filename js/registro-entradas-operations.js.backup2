/**// Operaciones específicas para el registro de entradas

 * ⚠️ DEPRECADO - Este archivo se mantiene por compatibilidadimport { agregarRegistroEntrada, cargarEntradasEnTabla, sincronizarEntradasDesdeSupabase, eliminarRegistroEntrada, generarReporteEntradas, inicializarDBEntradas } from './db-operations.js';

 * import { mostrarMensaje, mostrarAlertaBurbuja } from './logs.js';

 * CAMBIOS EN ESTA VERSIÓN:import { db } from './db-operations.js';

 * - Eliminada dependencia de logs.js (deprecado)

 * - Usa SweetAlert2 directamente// Variable para almacenar el producto seleccionado

 * - Funciones inline (sin bridge por ahora - archivo específico de una página)let productoSeleccionadoEntrada = null;

 * 

 * FUTURO: Migrar a EntryManagementService en Fase 4// Función para buscar producto por código, nombre o marca

 * export async function buscarProductoParaEntrada(termino, tipoBusqueda = 'codigo') {

 * @deprecated - Mantener hasta migración completa a servicios    try {

 */        if (!db) {

            throw new Error("Base de datos no inicializada");

// Operaciones específicas para el registro de entradas        }

import { agregarRegistroEntrada, cargarEntradasEnTabla, sincronizarEntradasDesdeSupabase, eliminarRegistroEntrada, generarReporteEntradas, inicializarDBEntradas } from './db-operations.js';

import { db } from './db-operations.js';        const transaction = db.transaction(["productos"], "readonly");

        const objectStore = transaction.objectStore("productos");

console.warn('⚠️ registro-entradas-operations.js - Versión deprecada (sin logs.js)');

        return new Promise((resolve, reject) => {

// Helper para mostrar alertas sin logs.js            let request;

function mostrarAlerta(mensaje, tipo = 'info') {

    const iconos = {            switch (tipoBusqueda) {

        success: 'success',                case 'codigo':

        error: 'error',                    const index = objectStore.index("codigo");

        warning: 'warning',                    request = index.get(termino);

        info: 'info'                    break;

    };                case 'nombre':

                    const indexNombre = objectStore.index("nombre");

    Swal.fire({                    request = indexNombre.getAll();

        icon: iconos[tipo] || 'info',                    break;

        title: mensaje,                case 'marca':

        toast: true,                    const indexMarca = objectStore.index("marca");

        position: 'top-end',                    request = indexMarca.getAll();

        showConfirmButton: false,                    break;

        timer: 3000,                default:

        timerProgressBar: true                    reject(new Error("Tipo de búsqueda no válido"));

    });                    return;

}            }



// Variable para almacenar el producto seleccionado            request.onsuccess = function (event) {

let productoSeleccionadoEntrada = null;                let resultado = event.target.result;



// Función para buscar producto por código, nombre o marca                if (tipoBusqueda === 'nombre' || tipoBusqueda === 'marca') {

export async function buscarProductoParaEntrada(termino, tipoBusqueda = 'codigo') {                    // Filtrar resultados para búsquedas por nombre o marca

    try {                    resultado = resultado.filter(producto => {

        if (!db) {                        const campo = tipoBusqueda === 'nombre' ? producto.nombre : producto.marca;

            throw new Error("Base de datos no inicializada");                        return campo && campo.toLowerCase().includes(termino.toLowerCase());

        }                    });



        const transaction = db.transaction(["productos"], "readonly");                    // Devolver el primer resultado encontrado o null

        const objectStore = transaction.objectStore("productos");                    resultado = resultado.length > 0 ? resultado[0] : null;

                }

        return new Promise((resolve, reject) => {

            let request;                resolve(resultado);

            };

            switch (tipoBusqueda) {

                case 'codigo':            request.onerror = function (event) {

                    const index = objectStore.index("codigo");                console.error(`Error al buscar producto por ${tipoBusqueda}:`, event.target.error);

                    request = index.get(termino);                reject(event.target.error);

                    break;            };

                case 'nombre':        });

                    const indexNombre = objectStore.index("nombre");

                    request = indexNombre.getAll();    } catch (error) {

                    break;        console.error("Error en buscarProductoParaEntrada:", error);

                case 'marca':        throw error;

                    const indexMarca = objectStore.index("marca");    }

                    request = indexMarca.getAll();}

                    break;

                default:// Función para mostrar los datos del producto encontrado

                    reject(new Error("Tipo de búsqueda no válido"));export function mostrarDatosProductoEntrada(producto) {

                    return;    if (!producto) {

            }        limpiarFormularioEntrada();

        mostrarAlertaBurbuja("Producto no encontrado", "warning");

            request.onsuccess = function (event) {        return;

                let resultado = event.target.result;    }



                if (tipoBusqueda === 'nombre' || tipoBusqueda === 'marca') {    productoSeleccionadoEntrada = producto;

                    resultado = resultado.filter(producto => {

                        const campo = tipoBusqueda === 'nombre' ? producto.nombre : producto.marca;    // Llenar los campos del formulario

                        return campo && campo.toLowerCase().includes(termino.toLowerCase());    const campos = [

                    });        { id: 'codigoProducto', valor: producto.codigo || '' },

                    resultado = resultado.length > 0 ? resultado[0] : null;        { id: 'nombreProducto', valor: producto.nombre || '' },

                }        { id: 'marcaProducto', valor: producto.marca || '' },

        { id: 'categoriaProducto', valor: producto.categoria || '' },

                resolve(resultado);        { id: 'unidadProducto', valor: producto.unidad || '' }

            };    ];



            request.onerror = function (event) {    campos.forEach(campo => {

                console.error(`Error al buscar producto por ${tipoBusqueda}:`, event.target.error);        const elemento = document.getElementById(campo.id);

                reject(event.target.error);        if (elemento) {

            };            elemento.value = campo.valor;

        });        }

    });

    } catch (error) {

        console.error("Error en buscarProductoParaEntrada:", error);    // Limpiar campos de entrada específicos

        throw error;    const camposEntrada = ['cantidadEntrada', 'fechaEntrada', 'comentariosEntrada'];

    }    camposEntrada.forEach(campoId => {

}        const elemento = document.getElementById(campoId);

        if (elemento) {

// Función para mostrar los datos del producto encontrado            elemento.value = '';

export function mostrarDatosProductoEntrada(producto) {        }

    if (!producto) {    });

        limpiarFormularioEntrada();

        mostrarAlerta("Producto no encontrado", "warning");    // Establecer fecha actual por defecto

        return;    const fechaEntrada = document.getElementById('fechaEntrada');

    }    if (fechaEntrada) {

        fechaEntrada.value = new Date().toISOString().split('T')[0];

    productoSeleccionadoEntrada = producto;    }



    const campos = [    // Enfocar en el campo de cantidad

        { id: 'codigoProducto', valor: producto.codigo || '' },    const cantidadInput = document.getElementById('cantidadEntrada');

        { id: 'nombreProducto', valor: producto.nombre || '' },    if (cantidadInput) {

        { id: 'marcaProducto', valor: producto.marca || '' },        cantidadInput.focus();

        { id: 'categoriaProducto', valor: producto.categoria || '' },    }

        { id: 'unidadProducto', valor: producto.unidad || '' }

    ];    mostrarAlertaBurbuja(`Producto encontrado: ${producto.nombre}`, "success");

}

    campos.forEach(campo => {

        const elemento = document.getElementById(campo.id);// Función para limpiar el formulario de entrada

        if (elemento) {export function limpiarFormularioEntrada() {

            elemento.value = campo.valor;    productoSeleccionadoEntrada = null;

        }

    });    const campos = [

        'codigoProducto', 'nombreProducto', 'marcaProducto',

    const camposEntrada = ['cantidadEntrada', 'fechaEntrada', 'comentariosEntrada'];        'categoriaProducto', 'unidadProducto', 'cantidadEntrada',

    camposEntrada.forEach(campoId => {        'fechaEntrada', 'comentariosEntrada'

        const elemento = document.getElementById(campoId);    ];

        if (elemento) {

            elemento.value = '';    campos.forEach(campoId => {

        }        const elemento = document.getElementById(campoId);

    });        if (elemento) {

            elemento.value = '';

    const fechaEntrada = document.getElementById('fechaEntrada');        }

    if (fechaEntrada) {    });

        fechaEntrada.value = new Date().toISOString().split('T')[0];

    }    // Establecer fecha actual por defecto

    const fechaEntrada = document.getElementById('fechaEntrada');

    const cantidadInput = document.getElementById('cantidadEntrada');    if (fechaEntrada) {

    if (cantidadInput) {        fechaEntrada.value = new Date().toISOString().split('T')[0];

        cantidadInput.focus();    }

    }}



    mostrarAlerta(`Producto encontrado: ${producto.nombre}`, "success");// Función para registrar una nueva entrada

}export async function registrarEntrada() {

    try {

// Función para limpiar el formulario de entrada        if (!productoSeleccionadoEntrada) {

export function limpiarFormularioEntrada() {            mostrarAlertaBurbuja("Primero debe buscar y seleccionar un producto", "warning");

    productoSeleccionadoEntrada = null;            return false;

        }

    const campos = [

        'codigoProducto', 'nombreProducto', 'marcaProducto',        // Obtener datos del formulario

        'categoriaProducto', 'unidadProducto', 'cantidadEntrada',        const cantidad = document.getElementById('cantidadEntrada')?.value?.trim();

        'fechaEntrada', 'comentariosEntrada'        const fechaEntrada = document.getElementById('fechaEntrada')?.value;

    ];        const comentarios = document.getElementById('comentariosEntrada')?.value?.trim() || '';



    campos.forEach(campoId => {        // Validaciones

        const elemento = document.getElementById(campoId);        if (!cantidad || isNaN(cantidad) || parseFloat(cantidad) <= 0) {

        if (elemento) {            mostrarAlertaBurbuja("Ingrese una cantidad válida", "error");

            elemento.value = '';            return false;

        }        }

    });

        if (!fechaEntrada) {

    const fechaEntrada = document.getElementById('fechaEntrada');            mostrarAlertaBurbuja("Seleccione una fecha de entrada", "error");

    if (fechaEntrada) {            return false;

        fechaEntrada.value = new Date().toISOString().split('T')[0];        }

    }

}        // Preparar datos de la entrada

        const entradaData = {

// Función para registrar una nueva entrada            codigo: productoSeleccionadoEntrada.codigo,

export async function registrarEntrada() {            nombre: productoSeleccionadoEntrada.nombre,

    try {            marca: productoSeleccionadoEntrada.marca,

        if (!productoSeleccionadoEntrada) {            categoria: productoSeleccionadoEntrada.categoria,

            mostrarAlerta("Primero debe buscar y seleccionar un producto", "warning");            unidad: productoSeleccionadoEntrada.unidad,

            return false;            cantidad: parseFloat(cantidad),

        }            fecha_entrada: fechaEntrada,

            comentarios: comentarios,

        const cantidad = document.getElementById('cantidadEntrada')?.value?.trim();            producto_id: productoSeleccionadoEntrada.id || null

        const fechaEntrada = document.getElementById('fechaEntrada')?.value;        };

        const comentarios = document.getElementById('comentariosEntrada')?.value?.trim() || '';

        // Registrar la entrada

        if (!cantidad || isNaN(cantidad) || parseFloat(cantidad) <= 0) {        const entradaRegistrada = await agregarRegistroEntrada(entradaData);

            mostrarAlerta("Ingrese una cantidad válida", "error");

            return false;        if (entradaRegistrada) {

        }            mostrarAlertaBurbuja("Entrada registrada correctamente", "success");

            limpiarFormularioEntrada();

        if (!fechaEntrada) {

            mostrarAlerta("Seleccione una fecha de entrada", "error");            // Recargar tabla de entradas si existe

            return false;            await actualizarTablaEntradas();

        }

            return true;

        const entradaData = {        }

            codigo: productoSeleccionadoEntrada.codigo,

            nombre: productoSeleccionadoEntrada.nombre,    } catch (error) {

            marca: productoSeleccionadoEntrada.marca,        console.error("Error al registrar entrada:", error);

            categoria: productoSeleccionadoEntrada.categoria,        mostrarAlertaBurbuja("Error al registrar la entrada", "error");

            unidad: productoSeleccionadoEntrada.unidad,        return false;

            cantidad: parseFloat(cantidad),    }

            fecha_entrada: fechaEntrada,}

            comentarios: comentarios,

            producto_id: productoSeleccionadoEntrada.id || null// Función para actualizar la tabla de entradas

        };export async function actualizarTablaEntradas(filtros = {}) {

    try {

        const entradaRegistrada = await agregarRegistroEntrada(entradaData);        const entradas = await cargarEntradasEnTabla(filtros);

        const tbody = document.getElementById('tablaEntradasBody');

        if (entradaRegistrada) {

            mostrarAlerta("Entrada registrada correctamente", "success");        if (!tbody) {

            limpiarFormularioEntrada();            console.warn("No se encontró el elemento tablaEntradasBody");

            await actualizarTablaEntradas();            return;

            return true;        }

        }

        tbody.innerHTML = '';

    } catch (error) {

        console.error("Error al registrar entrada:", error);        if (entradas.length === 0) {

        mostrarAlerta("Error al registrar la entrada", "error");            tbody.innerHTML = `

        return false;                <tr class="dark-theme-bg">

    }                    <td colspan="9" class="px-6 py-4 text-center text-sm text-gray-500 dark-theme-text-secondary">

}                        No hay entradas registradas

                    </td>

// Función para actualizar la tabla de entradas                </tr>

export async function actualizarTablaEntradas(filtros = {}) {            `;

    try {            return;

        const entradas = await cargarEntradasEnTabla(filtros);        }

        const tbody = document.getElementById('tablaEntradasBody');

        entradas.forEach((entrada, index) => {

        if (!tbody) {            const fila = document.createElement('tr');

            console.warn("No se encontró el elemento tablaEntradasBody");            fila.className = index % 2 === 0 ? 'bg-white dark-theme-bg' : 'bg-gray-50 dark-theme-bg-secondary';

            return;

        }            fila.innerHTML = `

                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark-theme-text">

        tbody.innerHTML = '';                    ${entrada.codigo || 'N/A'}

                </td>

        if (entradas.length === 0) {                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

            tbody.innerHTML = `                    ${entrada.nombre || 'N/A'}

                <tr class="dark-theme-bg">                </td>

                    <td colspan="9" class="px-6 py-4 text-center text-sm text-gray-500 dark-theme-text-secondary">                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

                        No hay entradas registradas                    ${entrada.marca || 'N/A'}

                    </td>                </td>

                </tr>                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

            `;                    ${entrada.categoria || 'N/A'}

            return;                </td>

        }                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

                    ${entrada.unidad || 'N/A'}

        entradas.forEach((entrada, index) => {                </td>

            const fila = document.createElement('tr');                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

            fila.className = index % 2 === 0 ? 'bg-white dark-theme-bg' : 'bg-gray-50 dark-theme-bg-secondary';                    ${entrada.cantidad || 0}

                </td>

            fila.innerHTML = `                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark-theme-text">                    ${entrada.fecha_entrada ? new Date(entrada.fecha_entrada).toLocaleDateString() : 'N/A'}

                    ${entrada.codigo || 'N/A'}                </td>

                </td>                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">                    ${entrada.comentarios || '-'}

                    ${entrada.nombre || 'N/A'}                </td>

                </td>                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">                    <button onclick="eliminarEntrada(${entrada.id})" 

                    ${entrada.marca || 'N/A'}                            class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 transition-colors">

                </td>                        Eliminar

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">                    </button>

                    ${entrada.categoria || 'N/A'}                </td>

                </td>            `;

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

                    ${entrada.unidad || 'N/A'}            tbody.appendChild(fila);

                </td>        });

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

                    ${entrada.cantidad || 0}        // Actualizar contador de entradas

                </td>        const contadorElement = document.getElementById('contadorEntradas');

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">        if (contadorElement) {

                    ${entrada.fecha_entrada ? new Date(entrada.fecha_entrada).toLocaleDateString() : 'N/A'}            contadorElement.textContent = `Total: ${entradas.length} entradas`;

                </td>        }

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark-theme-text-secondary">

                    ${entrada.comentarios || '-'}    } catch (error) {

                </td>        console.error("Error al actualizar tabla de entradas:", error);

                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">        mostrarAlertaBurbuja("Error al cargar entradas", "error");

                    <button onclick="eliminarEntrada(${entrada.id})"     }

                            class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 transition-colors">}

                        Eliminar

                    </button>// Función para eliminar una entrada (disponible globalmente)

                </td>window.eliminarEntrada = async function (entradaId) {

            `;    if (!confirm('¿Está seguro de que desea eliminar esta entrada?')) {

        return;

            tbody.appendChild(fila);    }

        });

    try {

        const contadorElement = document.getElementById('contadorEntradas');        await eliminarRegistroEntrada(entradaId);

        if (contadorElement) {        mostrarAlertaBurbuja("Entrada eliminada correctamente", "success");

            contadorElement.textContent = `Total: ${entradas.length} entradas`;        await actualizarTablaEntradas();

        }    } catch (error) {

        console.error("Error al eliminar entrada:", error);

    } catch (error) {        mostrarAlertaBurbuja("Error al eliminar entrada", "error");

        console.error("Error al actualizar tabla de entradas:", error);    }

        mostrarAlerta("Error al cargar entradas", "error");};

    }

}// Función para filtrar entradas

export async function filtrarEntradas() {

// Función para eliminar una entrada (disponible globalmente)    const filtros = {

window.eliminarEntrada = async function (entradaId) {        codigo: document.getElementById('filtroCodigo')?.value?.trim() || '',

    if (!confirm('¿Está seguro de que desea eliminar esta entrada?')) {        nombre: document.getElementById('filtroNombre')?.value?.trim() || '',

        return;        marca: document.getElementById('filtroMarca')?.value?.trim() || ''

    }    };



    try {    await actualizarTablaEntradas(filtros);

        await eliminarRegistroEntrada(entradaId);}

        mostrarAlerta("Entrada eliminada correctamente", "success");

        await actualizarTablaEntradas();// Función para limpiar filtros

    } catch (error) {export function limpiarFiltros() {

        console.error("Error al eliminar entrada:", error);    const filtros = ['filtroCodigo', 'filtroNombre', 'filtroMarca'];

        mostrarAlerta("Error al eliminar entrada", "error");    filtros.forEach(filtroId => {

    }        const elemento = document.getElementById(filtroId);

};        if (elemento) {

            elemento.value = '';

// Función para filtrar entradas        }

export async function filtrarEntradas() {    });

    const filtros = {

        codigo: document.getElementById('filtroCodigo')?.value?.trim() || '',    actualizarTablaEntradas();

        nombre: document.getElementById('filtroNombre')?.value?.trim() || '',}

        marca: document.getElementById('filtroMarca')?.value?.trim() || ''

    };// Función para sincronizar entradas

export async function sincronizarEntradas() {

    await actualizarTablaEntradas(filtros);    try {

}        mostrarAlertaBurbuja("Sincronizando entradas...", "info");

        await sincronizarEntradasDesdeSupabase();

// Función para limpiar filtros        await actualizarTablaEntradas();

export function limpiarFiltros() {    } catch (error) {

    const filtros = ['filtroCodigo', 'filtroNombre', 'filtroMarca'];        console.error("Error al sincronizar entradas:", error);

    filtros.forEach(filtroId => {        mostrarAlertaBurbuja("Error al sincronizar entradas", "error");

        const elemento = document.getElementById(filtroId);    }

        if (elemento) {}

            elemento.value = '';

        }// Función para generar reporte

    });export async function generarReporte() {

    try {

    actualizarTablaEntradas();        const filtros = {

}            codigo: document.getElementById('filtroCodigo')?.value?.trim() || '',

            nombre: document.getElementById('filtroNombre')?.value?.trim() || '',

// Función para sincronizar entradas            marca: document.getElementById('filtroMarca')?.value?.trim() || ''

export async function sincronizarEntradas() {        };

    try {

        mostrarAlerta("Sincronizando entradas...", "info");        await generarReporteEntradas(filtros);

        await sincronizarEntradasDesdeSupabase();    } catch (error) {

        await actualizarTablaEntradas();        console.error("Error al generar reporte:", error);

    } catch (error) {        mostrarAlertaBurbuja("Error al generar reporte", "error");

        console.error("Error al sincronizar entradas:", error);    }

        mostrarAlerta("Error al sincronizar entradas", "error");}

    }

}// Función para inicializar la página de registro de entradas

export async function inicializarRegistroEntradas() {

// Función para generar reporte    try {

export async function generarReporte() {        // Inicializar base de datos de entradas

    try {        await inicializarDBEntradas();

        const filtros = {

            codigo: document.getElementById('filtroCodigo')?.value?.trim() || '',        // Cargar entradas en la tabla

            nombre: document.getElementById('filtroNombre')?.value?.trim() || '',        await actualizarTablaEntradas();

            marca: document.getElementById('filtroMarca')?.value?.trim() || ''

        };        // Configurar event listeners

        configurarEventListeners();

        await generarReporteEntradas(filtros);

    } catch (error) {        console.log("Página de registro de entradas inicializada correctamente");

        console.error("Error al generar reporte:", error);

        mostrarAlerta("Error al generar reporte", "error");    } catch (error) {

    }        console.error("Error al inicializar registro de entradas:", error);

}        mostrarAlertaBurbuja("Error al inicializar la página", "error");

    }

// Función para inicializar la página de registro de entradas}

export async function inicializarRegistroEntradas() {

    try {// Función para configurar todos los event listeners

        await inicializarDBEntradas();function configurarEventListeners() {

        await actualizarTablaEntradas();    // Botones de búsqueda

        configurarEventListeners();    const btnBuscarCodigo = document.getElementById('buscarPorCodigo');

        console.log("Página de registro de entradas inicializada correctamente");    const btnBuscarNombre = document.getElementById('buscarPorNombre');

    } catch (error) {    const btnBuscarMarca = document.getElementById('buscarPorMarca');

        console.error("Error al inicializar registro de entradas:", error);

        mostrarAlerta("Error al inicializar la página", "error");    if (btnBuscarCodigo) {

    }        btnBuscarCodigo.addEventListener('click', () => buscarProducto('codigo'));

}    }



// Función para configurar todos los event listeners    if (btnBuscarNombre) {

function configurarEventListeners() {        btnBuscarNombre.addEventListener('click', () => buscarProducto('nombre'));

    const btnBuscarCodigo = document.getElementById('buscarPorCodigo');    }

    const btnBuscarNombre = document.getElementById('buscarPorNombre');

    const btnBuscarMarca = document.getElementById('buscarPorMarca');    if (btnBuscarMarca) {

        btnBuscarMarca.addEventListener('click', () => buscarProducto('marca'));

    if (btnBuscarCodigo) {    }

        btnBuscarCodigo.addEventListener('click', () => buscarProducto('codigo'));

    }    // Botón registrar entrada

    const btnRegistrarEntrada = document.getElementById('registrarEntrada');

    if (btnBuscarNombre) {    if (btnRegistrarEntrada) {

        btnBuscarNombre.addEventListener('click', () => buscarProducto('nombre'));        btnRegistrarEntrada.addEventListener('click', registrarEntrada);

    }    }



    if (btnBuscarMarca) {    // Botón limpiar formulario

        btnBuscarMarca.addEventListener('click', () => buscarProducto('marca'));    const btnLimpiarFormulario = document.getElementById('limpiarFormulario');

    }    if (btnLimpiarFormulario) {

        btnLimpiarFormulario.addEventListener('click', limpiarFormularioEntrada);

    const btnRegistrarEntrada = document.getElementById('registrarEntrada');    }

    if (btnRegistrarEntrada) {

        btnRegistrarEntrada.addEventListener('click', registrarEntrada);    // Botones de filtros

    }    const btnFiltrar = document.getElementById('filtrarEntradas');

    const btnLimpiarFiltros = document.getElementById('limpiarFiltros');

    const btnLimpiarFormulario = document.getElementById('limpiarFormulario');

    if (btnLimpiarFormulario) {    if (btnFiltrar) {

        btnLimpiarFormulario.addEventListener('click', limpiarFormularioEntrada);        btnFiltrar.addEventListener('click', filtrarEntradas);

    }    }



    const btnFiltrar = document.getElementById('filtrarEntradas');    if (btnLimpiarFiltros) {

    const btnLimpiarFiltros = document.getElementById('limpiarFiltros');        btnLimpiarFiltros.addEventListener('click', limpiarFiltros);

    }

    if (btnFiltrar) {

        btnFiltrar.addEventListener('click', filtrarEntradas);    // Botones de sincronización y reporte

    }    const btnSincronizar = document.getElementById('sincronizarEntradas');

    const btnGenerarReporte = document.getElementById('generarReporte');

    if (btnLimpiarFiltros) {

        btnLimpiarFiltros.addEventListener('click', limpiarFiltros);    if (btnSincronizar) {

    }        btnSincronizar.addEventListener('click', sincronizarEntradas);

    }

    const btnSincronizar = document.getElementById('sincronizarEntradas');

    const btnGenerarReporte = document.getElementById('generarReporte');    if (btnGenerarReporte) {

        btnGenerarReporte.addEventListener('click', generarReporte);

    if (btnSincronizar) {    }

        btnSincronizar.addEventListener('click', sincronizarEntradas);

    }    // Enter en campos de búsqueda

    const camposBusqueda = ['busquedaCodigo', 'busquedaNombre', 'busquedaMarca'];

    if (btnGenerarReporte) {    camposBusqueda.forEach((campoId, index) => {

        btnGenerarReporte.addEventListener('click', generarReporte);        const campo = document.getElementById(campoId);

    }        if (campo) {

            campo.addEventListener('keypress', (e) => {

    const camposBusqueda = ['busquedaCodigo', 'busquedaNombre', 'busquedaMarca'];                if (e.key === 'Enter') {

    camposBusqueda.forEach((campoId, index) => {                    const tipos = ['codigo', 'nombre', 'marca'];

        const campo = document.getElementById(campoId);                    buscarProducto(tipos[index]);

        if (campo) {                }

            campo.addEventListener('keypress', (e) => {            });

                if (e.key === 'Enter') {        }

                    const tipos = ['codigo', 'nombre', 'marca'];    });

                    buscarProducto(tipos[index]);

                }    // Enter en campo de cantidad

            });    const cantidadEntrada = document.getElementById('cantidadEntrada');

        }    if (cantidadEntrada) {

    });        cantidadEntrada.addEventListener('keypress', (e) => {

            if (e.key === 'Enter') {

    const cantidadEntrada = document.getElementById('cantidadEntrada');                registrarEntrada();

    if (cantidadEntrada) {            }

        cantidadEntrada.addEventListener('keypress', (e) => {        });

            if (e.key === 'Enter') {    }

                registrarEntrada();}

            }

        });// Función auxiliar para buscar producto

    }async function buscarProducto(tipo) {

}    const terminos = {

        codigo: document.getElementById('busquedaCodigo')?.value?.trim(),

// Función auxiliar para buscar producto        nombre: document.getElementById('busquedaNombre')?.value?.trim(),

async function buscarProducto(tipo) {        marca: document.getElementById('busquedaMarca')?.value?.trim()

    const terminos = {    };

        codigo: document.getElementById('busquedaCodigo')?.value?.trim(),

        nombre: document.getElementById('busquedaNombre')?.value?.trim(),    const termino = terminos[tipo];

        marca: document.getElementById('busquedaMarca')?.value?.trim()    if (!termino) {

    };        mostrarAlertaBurbuja(`Ingrese un ${tipo} para buscar`, "warning");

        return;

    const termino = terminos[tipo];    }

    if (!termino) {

        mostrarAlerta(`Ingrese un ${tipo} para buscar`, "warning");    try {

        return;        const producto = await buscarProductoParaEntrada(termino, tipo);

    }        mostrarDatosProductoEntrada(producto);

    } catch (error) {

    try {        console.error(`Error al buscar producto por ${tipo}:`, error);

        const producto = await buscarProductoParaEntrada(termino, tipo);        mostrarAlertaBurbuja("Error al buscar producto", "error");

        mostrarDatosProductoEntrada(producto);    }

    } catch (error) {}

        console.error(`Error al buscar producto por ${tipo}:`, error);
        mostrarAlerta("Error al buscar producto", "error");
    }
}
